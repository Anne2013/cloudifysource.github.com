---
layout: default
title: Developing a custom cloud driver
category: Developer Guide
---

p. How to develop your custom Cloud Driver.

h1. How does the Cloud Driver Works – Technical introduction

Cloudify Cloud Driver (ProvisioningDriver is the Interface Name), has 4 main scenarios
# Bootstrap Cloud – which is the installation of Cloudify Management VM and Controller on a Cloud from your laptop
# Install Application – which is the creation of Application VMs with Cloudify Agent on them as part of an application deployment. In this case, the Cloud Driver resides on the management VM as part of Cloudify Controller
# Uninstall Application – termination of Application VMs.
# Teardown Cloud – Termination of all Cloudify VMs and components on the Cloud.

Another scenario: Cluster Healing is the same as Install Application from Cloud Driver perspective

The below sequence diagrams explains it in a more technical fashion.

<img src="/guide/images/clouddrivers/bootstrapping.png"/>

<img src="/guide/images/clouddrivers/installApplication.png"/>

<img src="/guide/images/clouddrivers/uninstallApplication.png"/>

<img src="/guide/images/clouddrivers/tearDown.png"/>

<img src="/guide/images/clouddrivers/cluster-healing.png"/>


h3. Flows explained


h4. Bootstrapping Cloud


In this scenario the Cloud Driver resides on the client side as no VM with Cloudify Server (Controller) exist.
The user instructs the Cloudify Interactive Shell to bootstrap Cloudify, providing a specific Cloud Driver implementation and configuration.
The Cloud Driver is instantiated by the shell and now the shell will need to give the Driver Reference to its configuration object
(org.cloudifysource.dsl.cloud.Cloud).  This is done by calling the setConfig method.

Next the Cloud Driver will be invoked by the shell using the startManagementMachines method.
This in turn will call the Cloud API using the API security settings in order to get the management VMs.

<script src="https://gist.github.com/2036493.js?file=createServer.java"></script>

This will return an array of MachineDetails (org.cloudifysource.esc.driver.provisioning.MachineDetails) for each of the management Machines.
These details will be used by Cloudify CLI to connect to the Hosts and install the management components on them. Finally Cloudify will start the Cloudify Controller components: the ESM, the GSM, the LUS and the Management Space. It will also start the Web Container for the Management application and the REST API container.


h4. Installing an Application


This is a server side scenario from Cloud Driver perspective. Once the Controller had been instructed to install an application, it will command the Driver to start X virtual machines according to the recipe instructions.
The Cloud Driver needs first to get the Admin Object so it can report to the Admin about the VMs public IPs and other details. This is done using the setAdmin method by the Controller
Next the Controller will ask the Driver to repeat the startMachine method until all machines are up and running with Cloudify Agent registered in the LUS or until timeout occurs.
The startMachine flow is simple: The driver calls the IaaS API. Polls the API for the VM details. Ping the VM to makes sure its accessible and then access it with SSH, this time installing the Cloudify Agent components: GSA and GSC and starting them.
The Driver will get the machine information from the template properties corresponding to the requested template name. The template information is within the config object
The same flow will happen if the Controller needs to compensate for a crushed VM or to rebalance one of the services.


h4. Uninstalling an Application


h4. Tearing Down the Cloud



h1. Setting Up Your Project


p. This section will teach you what you need in your eclipse project

h1. Before You Code


p. This section explains how to get what you need from your cloud account – credentials, SSH access etc.


h3. Getting the Security Credentials for API Access


The security credentials you will need to have for the cloud driver are of two kinds:
* The credentials for the Cloud IaaS API calls
* The credentials for accessing a VM with SSH
In some cases you will need the storage credentials as well

For example this is how you would do it with Openstack:
The Openstack administrator will create a user login ID for you.
When you receive your user id, it will be accompanied by an access key and a secret key.
The access key is used in the Cloud driver configuration for the setting “user”.
The secret key should be used to set the “apiKey” setting.
In order to enable SSL, required for bootstrapping the system, generate a key pair with "HybridFox":http://code.google.com/p/hybridfox/
and save it in the cloud driver “upload” directory.
Also, set the “keyFile” property to the name you gave the key pair in the Cloud driver configuration file.

<script src="https://gist.github.com/2042919.js?file=driver_user.groovy"></script>

<img src="/guide/images/clouddrivers/cloud_driver_plugin.png"/>


h3. Getting the right Image and HW for Management

You will need to define HW / SW templates in the Cloud Driver configuration file. One of them will define the management VM. 
Keep In mind the following:
* The management VM must have public IP to be accessed from the internet or other subnets within the organization using HTTP
* The management VM must have SSH access to be installed
* It will require X of disk space and Y GB of RAM memory
* Currently it must be a Linux Image 


