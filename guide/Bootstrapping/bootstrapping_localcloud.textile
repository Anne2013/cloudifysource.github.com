---
layout: default
title: Bootstrapping Cloudify on localcloud
category: Bootstrapping
---
h1. Starting the Cloudify Shell
Cloudify shell is used to bootstrap different Cloud environments and install your applications on them. To use the shell, simple go to your Cloudify Installation root folder, navigate to tools -> cli folder and run cloudify.bat or cloudify.sh depending on your OS 

h1. Bootstrapping the Local Cloud
The Local Cloud is a development environment that allows the user to run all Cloudify management services and application services on a single machine.
Bootstrapping the Local Cloud is extremely simple - just start the Cloudify shell and type: __bootstrap-localcloud__
{code }
DESCRIPTION
        bootstrap-localcloud

        Starts Cloudify Agent without any zone, and the Cloudify management 
        processes on local machine. These processes are isolated from Cloudify 
        processes running on other machines.

SYNTAX
        bootstrap-localcloud [options]

OPTIONS
        -timeout
                The number of minutes to wait until the operation is done. 
                By default waits 5 minutes. (defaults to 5)
        --help
                Display this help message
        -nic-address
                The ip address of the local host network card. Specify this
                when the local machine has more than one network adapter, and a 
                specific network card should be used for network communication.
        -lookup-groups
                A unique name that is used to group together Cloudify components. 
                The default localcloud lookup group is 'localcloud'.
                Override in order to start multiple local clouds on the local machine.
        --verbose
                Show detailed execution results including exception stack traces.
{code}


h1. Bootstrapping Cloudify for Azure
*Before you bootstrap Cloudify for Azure for the first time you must go through the initial setup process.*
For Azure, any application must have an installation of Cloudify. Therefore, you must bootstrap a new environment using the application recipe before installing the application. Do that using the {{azure:bootstrap-app}}
{code}
DESCRIPTION
        azure:bootstrap-app

        Starts Azure Role Instances based on the specified application description.

SYNTAX
        azure:bootstrap-app [options] application-file

ARGUMENTS
        application-file
                The application directory or archive

OPTIONS
        -azure-pwd
                The password that protects the PFX file containing the Remote Desktop
                certificate. This option must be specified the first time an 
                application is bootstrapped since it is required for creating an Azure
                hosted-service.
        -timeout
                The number of minutes to wait until the operation is done. By 
                default waits 30 minutes. (defaults to 30)
        -azure-slot
                The Azure Deployment slot (staging or production). Default: staging
                (defaults to staging)
        -azure-location
                The Azure Hosted service location (data center region).
                (defaults to Anywhere US)
        -progress
                The polling interval in minutes used for checking if the operation 
                is done. Defaults to 1 minute. Use together with the -timeout option
                (defaults to 1)
        --help
                Display this help message
        -azure-name
                The Azure Deployment name in production is the [application name],
                and in staging is the [application name]-staging
        -azure-description
                The Azure Hosted service description (empty by default).
                (defaults to )
        --verbose
                show detailed execution result including exception stack trace
        -azure-svc
                The Azure Hosted Service name. Default: [application name]
{code}
{note}This is a temporary version of the cloud driver configuration. An improved version will be released and documented on December 15{note}

h1. Bootstrapping on EC2 and other clouds
In order to bootstrap Cloudify on EC2 you need an account on Amazon Web Services. Before you can use the shell to bootstrap your EC2 environment on the first time, you must do the following:
# Generate a pem file and save it under <Cloudify Root>/tools/cli/plugins/esc/ec2/upload
In the EC2 Console create a key pair and download the private key
Click Key Pairs under Networking and Security in the Navigation pane and then click the Create Key Pair button (save it as myFileName.pem).
This private key allow Cloudify cloud driver to create SSH connections to newly created instances.
# Edit the ec2.groovy file under <Cloudify Root>/tools/cli/plugins/esc/ec2/
* enter your Access Key ID under user
* enter your Secret Access Key under apikey
* enter your pem file name under keyFile
* enter your key pair under keyPair
{code}
cloud {
	
	user "paste your user here"
	apiKey "paste your API key here"
	provider "aws-ec2"
	localDirectory "tools/cli/plugins/esc/ec2/upload"
	remoteDirectory "/home/ec2-user/gs-files"
	
	imageId "us-east-1/ami-76f0061f"
	machineMemoryMB "1600"
	hardwareId "m1.small"

	securityGroup "default"
	
	keyFile "your pem file name here"
	keyPair "your key pair here"
	
	cloudifyUrl "https://s3.amazonaws.com/test-repository-ec2dev/cloudify/gigaspaces.zip"
	machineNamePrefix "gs_esm_gsa_"

	dedicatedManagementMachines true
	managementOnlyFiles ([])
	connectedToPrivateIp false
	
	sshLoggingLevel java.util.logging.Level.WARNING
	managementGroup "management_machine"
	numberOfManagementMachines 2
	
	zones (["agent"])

	reservedMemoryCapacityPerMachineInMB 1024
	
	
}
{code}

Now you can use the {{bootstrap-cloud}} command
{code}
DESCRIPTION
        bootstrap-cloud

        Starts Cloudify Agent without any zone, and the Cloudify management processes on the provided cloud.

SYNTAX
        bootstrap-cloud [options] provider

ARGUMENTS
        provider
                the cloud prodiver to use

OPTIONS
        -timeout
                The number of minutes to wait until the operation is done. By default waits 5 minutes.
                (defaults to 60)
        --help
                Display this help message
        --verbose
                show detailed execution result including exception stack trace

{code}


