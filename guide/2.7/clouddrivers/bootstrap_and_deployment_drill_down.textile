---
layout: default
title: Deployment and bootstrap drill down
category: Developing Cloud Drivers
publish: true
abstract: Deployment and bootstrap drill down
pageord: 200
---

This topic is a drill down into the Openstack cloud driver (@OpenstackCloudDriver@:https://github.com/CloudifySource/cloudify/blob/master/esc/src/main/java/org/cloudifysource/esc/driver/provisioning/openstack/OpenStackCloudifyDriver.java) 
in the context of the following scenarios:

* *"Bootstrapping a Cloud":#bootstrap*--Allocates machines and installs the Cloudify controller.
* *"Installing an Application":#install*--Allocates machines for application services and installs the application's services (including the Cloudify agent). In this scenario, the cloud driver resides on the management machine as part of the Cloudify controller.<h4 class="info">There is also a *Cluster healing* scenario which is treated by Cloudify as being the same as the *Installing an application* scenario.</h4>
* *"Uninstalling an Application":#uninstall*--Stops the application's services and instructs the cloud driver to uninstall the machines used by the services.
* *"Tearing Down a Cloud":#teardown*--Uninstalls all Cloudify machines and components. 

h2(#bootstrap). Bootstrapping a Cloud

<img src="../../images/clouddrivers/bootstrapping.png"/>

In this scenario, the cloud driver resides on the client machine as no management machines with the Cloudify controller exist. At the Cloudify shell prompt, the user runs the bootstrap command specifying a cloud driver implementation. The cloud driver is instantiated by the shell, and now the shell passes the *Driver Reference* to its configuration object (org.cloudifysource.dsl.cloud.Cloud) by calling the @setConfig@ method.

<script src="https://gist.github.com/2043019.js?file=setConfig.java"></script>

Next, the shell invokes the cloud driver's @startManagementMachines@ method, which in turn calls the cloud's IaaS API (using the API security settings) to get the required management machines. The cloud API returns an array of MachineDetails (org.cloudifysource.esc.driver.provisioning.MachineDetails) with connction details for each of the allocated management machines. The details are used by the shell to connect to the machines and install the Cloudify management components. Finally, Cloudify starts the following Cloudify controller components: ESM(Elastic Service Manager), GSM(General Service Manager), LUS(Lookup Service) and the Management Space. It will also start the web management container and the REST API container.

<script src="https://gist.github.com/2043033.js?file=createServer.java"></script>

h2(#install). Installing an Application

<img src="../../images/clouddrivers/installApplication.png"/>

In this scenario, the cloud driver resides on the server machine. Once the controller is instructed to install an application, it instructs the cloud driver to start the number of application machines described in the recipe. To acheive this, the cloud driver first gets the Admin object so that it can report the public IP addresses of the allocated application machines and other details. This is achieved by the controller calling the setAdmin method.
Next, the controller invokes the cloud driver's @startMachine@ method, once for each machine that must be provisioned, until all the required machines are up and running with Cloudify agent registered with the LUS, or until the request times out.

The @startMachine@ uses the following steps:
# Calls the IaaS API
# Polls the API for the machine details
# Pings the machine to makes sure its accessible
# Connects to the machine over SSH
# Installs and starts the following Cloudify agent components: GSA and GSC

The driver gets the machine information from the template attributes (corresponding to the requested template name) defined in the configuration object.

The same scenario will occur if the controller has to compensate for a crashed machine or to rebalance one of the services, as shown in the following diagram:
<img src="../../images/clouddrivers/cluster-healing.png"/>

h4(#customag). Customizing the Agent Installation

<img src="../../images/clouddrivers/agent_installation.png"/>

h5(#cscr). Initialization Command 

You can script inline or point to an uploaded script as shown in the following example:
<script src="https://gist.github.com/3946829.js?file=inline.groovy"></script>

h5(#ftr). File Transfer 
 
You can specify how you want to transfer files to the remote machines :  SCP, SFTP or Windows protocol.

<script src="https://gist.github.com/4167436.js?file=fileTransfer.groovy"></script>

h5(#rme). Remote Execution 

You can specify how to execute the remote script: SSH or WinRM

<script src="https://gist.github.com/4167440.js?file=remoteExec.groovy"></script>

<br/>

h4(#cloudConf). Parameterizing the Cloud Driver

In order to pass configuration information to the Cloud Driver, at the Cloudify shell prompt, type: 

*@install-application@* @-cloudConfiguration PATH_TO_CONF PATH_TO_APPLICATION@
@cloudConfiguration@ contains a path (relative/absolute) to a file or a directory containing configuration information to be used by the cloud driver for this application as shown in the following code snippet:
<script src="https://gist.github.com/3713008.js?file=setCustomDataFile.java"></script>



h2(#uninstall). Uninstalling an Application

<img src="../../images/clouddrivers/uninstallApplication.png"/>

In this scenario, the cloud driver resides on the server machine. Once the controller is instructed to uninstall a deployed application, it stops the application's services and instructs the cloud driver to unininstall the machines used by the services. This is achieved by the controller calling the cloud driver's @stopMachine@ method, which in turn calls the cloud's IaaS API and instruct it to stop the relevant machines. 

<script src="https://gist.github.com/2043076.js?file=stopMachine.java"></script>

The following snippet shows how to call the cloud's IaaS API:

<script src="https://gist.github.com/2043089.js?file=terminateServerAPI.java"></script>

h2(#teardown). Tearing Down a Cloud

<img src="../../images/clouddrivers/tearDown.png"/>

In this scenario, the cloud driver resides on the client machine. At the Cloudify shell prompt, the user runs the tear down command specifying a cloud driver implementation to uninstall the management machines. This is achieved by the controller calling the cloud driver's @stopManagementMachines@ method, which in turn calls the cloud's IaaS API and instruct it to stop the relevant machines.

<script src="https://gist.github.com/2043105.js?file=stopManagement.java"></script>

h2. See Also

* "Developing Custom Cloud Drivers":../clouddrivers/developing_custom_clouddriver