---
layout: default
title: Service Descriptor Reference
category: Reference
publish: true
abstract: A reference with all the elements of the service descriptor
pageord: 200
---

h2. Click on the keywords to get more information

<script type="text/javascript">
var messages = {
service: 'The service root element, required',
service_name: 'The service name, required',
icon: 'The service icon file to be used in the management console, optional',
type: 'The service tier type to be used in the  manangement console, possible values: ',
numInstances: 'The number of instances planned for this service, required',
compute: 'A block specifying the compute resources to use for this service',
template: 'An attribute specifying a template name in the Cloud Driver configuration file',
lifecycle: 'A block specifying the handlers for the different lifecycle events',
plugins: 'A list of monitoring plugins to be invoked by this recipe',
plugin: ' A plugin descriptor block, contains the plugin class and configuration',
plugin_name: 'An alias for this plugin',
className: 'The class to load for this plugin. must be found in the the Cloudify agent classpath. Custom plugins should be under usmlib folder',
userInterface: 'The custom metric configuration in the management GUI',
metricGroups: 'A block describing groups of custom metrics as sub menus in the GUI',
metricGroup: 'A group of custom metrics as sub menu in the GUI',
widgetGroups: 'A block describing metrics mappings to widgets in GUI',
widgetGroup: 'A group of Widgets presenting a custom metric',
widgetGroup_name:'The name of the group',
widgets: 'The widgets used in the group',
balanceGauge: 'A gauge showing the relative SD in the cluster',
barLineChart: 'A complex chart showing bars for min-max range in the cluster and a line for cluster AVG' ,
elastic:'A global flag that enables changing the number of instances for this service',
minAllowedInstances:'The minimum number of service instances. Used together with scaling rules',
maxAllowedInstances:'The maximum number of service instances. Used together with scaling rules',
scaleCooldownInSeconds:'The time (in seconds) that scaling rules are disabled after scale in or out',
samplingPeriodInSeconds:'The time (in seconds) between two consecutive metric samples. Used together with scaling rules',
metric:'The name of the metric that is the basis for the scale rule decision',
movingTimeRangeInSeconds:'The sliding time range (in seconds) for aggregating per-instance metric samples.',
statistics:'The algorithms for aggregating metric samples by instances and by time',
highThreshold:'The value above which the number of instances is increased',
lowThreshold:'The value below which the number of instances is decreased'
}
</script> 

 
<pre class='prettyprint'>
service {
	
    name "mongod"
    icon "mongodb.png"
    type "NOSQL_DB"
    numInstances 2
    elastic true
    minAllowedInstances 1
    maxAllowedInstances 2
    scaleCooldownInSeconds 20
    samplingPeriodInSeconds 1
	
    compute {
        template "SMALL_LINUX_32"
    }

    lifecycle {
        init  "mongod_init.groovy"
        preInstall  "mongod_preInstall.groovy"
        install  "mongod_install.groovy"
        postInstall  "mongod_postInstall.groovy"
        preStart  "mongod_preStart.groovy"
        start  "mongod_start.groovy"
        postStart  "mongod_postStart.groovy"
        preStop  "mongod_preStop.groovy"
        postStop  "mongod_postStop.groovy"
        shutdown  "mongod_shutdown.groovy"
        preServiceStart  "mongod_preServiceStart.groovy"
        preServiceStop  "mongod_preServiceStop.groovy"		
        startDetectionTimeoutSecs 60
        startDetection {
            ServiceUtils.isPortOccupied(context.attributes.thisInstance["port"])
        }
    }
	
    scalingRules ([
      scalingRule {
        serviceStatistics {
          metric "Total Requests Count"
          movingTimeRangeInSeconds 20
          statistics Statistics.maximumThroughput
        }

        highThreshold {
          value 1
          instancesIncrease 1
        }

        lowThreshold {
          value 0.2
          instancesDecrease 1
        }
      }
    ])	
	
    plugins([ 	
        plugin {
            name "MongoDBMonitorsPlugin"
            className "org.cloudifysource.mongodb.MongoDBMonitorsPlugin"
            config([				
                   "host":"127.0.0.1",				
                   "dbName":"petclinic",
                   "dataSpec" : [
                                "Active Read Clients":"globalLock.activeClients.readers", 
                                "Active Write Clients":"globalLock.activeClients.writers", 
                                "Read Clients Waiting":"globalLock.currentQueue.readers", 
                                "Write Clients Waiting":"globalLock.currentQueue.writers", 
                                "Current Active Connections":"connections.current",
                                "Open Cursors":"cursors.totalOpen"
                                ]
                  ])
        }		
    ])
   userInterface {
		metricGroups = ([
			metricGroup {
				name "MongoDB"
				metrics([
					"Open Cursors", 
					"Current Active Connections",
					"Active Read Clients",
					"Active Write Clients",
					"Read Clients Waiting",
					"Write Clients Waiting"					
				])
			}
		])

		widgetGroups = ([
			widgetGroup {
				name "Open Cursors"
				widgets ([
					balanceGauge{metric = "Open Cursors"},
					barLineChart{
						metric "Open Cursors"
						axisYUnit Unit.REGULAR
					},
				])
			}, 
			widgetGroup {
				name "Current Active Connections"
				widgets ([
					balanceGauge{metric = "Current Active Connections"},
					barLineChart{
						metric "Current Active Connections"
						axisYUnit Unit.REGULAR
					},
				])
			}, 			
			widgetGroup {
				name "Active Read Clients"
				widgets ([
					balanceGauge{metric = "Active Read Clients"},
					barLineChart{
						metric "Active Read Clients"
						axisYUnit Unit.REGULAR
					},
				])
			}, 
			widgetGroup {
				name "Active Write Clients"
				widgets ([
					balanceGauge{metric = "Active Write Clients"},
					barLineChart{
						metric "Active Write Clients"
						axisYUnit Unit.REGULAR
					},
				])
			}, 
			widgetGroup {
				name "Read Clients Waiting"
				widgets ([
					balanceGauge{metric = "Read Clients Waiting"},
					barLineChart{
						metric "Read Clients Waiting"
						axisYUnit Unit.REGULAR
					},
				])
			}, 
		    widgetGroup {
				name "Write Clients Waiting"
				widgets ([
					balanceGauge{metric = "Write Clients Waiting"},
					barLineChart{
							metric "Write Clients Waiting"
							axisYUnit Unit.REGULAR
					},
				])
			}    
		])
	}  
}
</pre>
<script>
prettyPrint();
</script>  
 