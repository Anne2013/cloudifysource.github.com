---
layout: default
title: Service Descriptor Reference
category: Recipe Reference
publish: false
abstract: A reference with all the elements of the service descriptor
pageord: 1
---

h3. Click on the keywords to get more information

<script type="text/javascript">
var messages = {
service: 'The service root element, required',
service_name: 'The service name, required',
icon: 'The service icon file to be used in the management console, optional',
type: 'The service tier type to be used in the  manangement console, possible values: ',
numInstances: 'The number of instances planned for this service, required',
compute: 'A block specifying the compute resources to use for this service',
template: 'An attribute specifying a template name in the Cloud Driver configuration file',
lifecycle: 'A block specifying the handlers for the different lifecycle events',
plugins: 'A list of monitoring plugins to be invoked by this recipe',
plugin: ' A plugin descriptor block, contains the plugin class and configuration',
plugin_name: 'An alias for this plugin',
className: 'The class to load for this plugin. must be found in the the Cloudify agent classpath. Custom plugins should be under usmlib folder'

}
</script> 

 
<pre class='prettyprint'>
service {
	
    name "mongod"
    icon "mongodb.png"
    type "NOSQL_DB"
    numInstances 2
	
    compute {
        template "SMALL_LINUX_32"
    }

    lifecycle {
        install "mongod_install.groovy"
        start "mongod_start.groovy"			
        startDetectionTimeoutSecs 60
        startDetection {
            ServiceUtils.isPortOccupied(context.attributes.thisInstance["port"])
        }
    }
	
    plugins([ 	
        plugin {
            name "MongoDBMonitorsPlugin"
            className "org.cloudifysource.mongodb.MongoDBMonitorsPlugin"
            config([				
                   "host":"127.0.0.1",				
                   "dbName":"petclinic",
                   "dataSpec" : [
                                "Active Read Clients":"globalLock.activeClients.readers", 
                                "Active Write Clients":"globalLock.activeClients.writers", 
                                "Read Clients Waiting":"globalLock.currentQueue.readers", 
                                "Write Clients Waiting":"globalLock.currentQueue.writers", 
                                "Current Active Connections":"connections.current",
                                "Open Cursors":"cursors.totalOpen"
                                ]
                  ])
        }		
    ])
   userInterface {
		metricGroups = ([
			metricGroup {
				name "MongoDB"
				metrics([
					"Open Cursors", 
					"Current Active Connections",
					"Active Read Clients",
					"Active Write Clients",
					"Read Clients Waiting",
					"Write Clients Waiting"					
				])
			}
		])

		widgetGroups = ([
			widgetGroup {
				name "Open Cursors"
				widgets ([
					balanceGauge{metric = "Open Cursors"},
					barLineChart{
						metric "Open Cursors"
						axisYUnit Unit.REGULAR
					},
				])
			}, 
			widgetGroup {
				name "Current Active Connections"
				widgets ([
					balanceGauge{metric = "Current Active Connections"},
					barLineChart{
						metric "Current Active Connections"
						axisYUnit Unit.REGULAR
					},
				])
			}, 			
			widgetGroup {
				name "Active Read Clients"
				widgets ([
					balanceGauge{metric = "Active Read Clients"},
					barLineChart{
						metric "Active Read Clients"
						axisYUnit Unit.REGULAR
					},
				])
			}, 
			widgetGroup {
				name "Active Write Clients"
				widgets ([
					balanceGauge{metric = "Active Write Clients"},
					barLineChart{
						metric "Active Write Clients"
						axisYUnit Unit.REGULAR
					},
				])
			}, 
			widgetGroup {
				name "Read Clients Waiting"
				widgets ([
					balanceGauge{metric = "Read Clients Waiting"},
					barLineChart{
						metric "Read Clients Waiting"
						axisYUnit Unit.REGULAR
					},
				])
			}, 
		    widgetGroup {
				name "Write Clients Waiting"
				widgets ([
					balanceGauge{metric = "Write Clients Waiting"},
					barLineChart{
							metric "Write Clients Waiting"
							axisYUnit Unit.REGULAR
					},
				])
			}    
		])
	}  
}
</pre>
<script>
prettyPrint();
</script>  
 