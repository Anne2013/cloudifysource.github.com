---
layout: default
title: Chef Integration Documentation
category: Chef Integration
publish: false
abstract: Cloudify-Chef integration documentation
pageord: 200
---

Cloudify (starting from version 2.1.1) supports the "Opscode Chef":http://wiki.opscode.com/display/chef/Recipes platform as an additional method of conveniently deploying and configuring application services.

Chef provides a powerful multi-platform framework for configuring operating systems and services. It complements Cloudify recipes by handling the scope of intra-machine configurations. Using Chef, the lifecycle of services can be simplified as Chef takes care of keeping service configurations up-to-date with current specifications as defined by roles and cookbooks.

Before you proceed, make sure you are familiar with the basic concepts of Chef. For information, see "Chef Basics":http://wiki.opscode.com/display/chef/Chef+Basics.

In order to facilitate usage of Chef cookbooks for service installation, Cloudify provides a basic, configurable Chef recipe that does most of the work for you without any hassle. Typically you will only need to configure this recipe and take care of the post deployment phases that Chef doesn't cover.


h2. Using Chef with Cloudify


The next sections of this guide assume that you have Cloudify installed and that you have bootstrapped a Cloud, ready to install an application. For a quick introduction to setting up a Cloudify cloud, see Cloudify's "Quick Start Guide":../qsg/quick_start_guide_helloworld.


h3. Downloading Cloudify Chef Recipes and Supporting Files


To obtain the basic Chef recipes provided by Cloudify, download the following files and save them under @<cloudifyRoot>/recipes/services@:
* "@chef@":https://github.com/CloudifySource/cloudify-recipes/tree/master/services/chef
* "@chef-server@":https://github.com/CloudifySource/cloudify-recipes/tree/master/services/chef-server
In addition download the mySql example "@Simple mySQL example@":https://github.com/CloudifySource/cloudify-recipes/tree/master/services/chef-services/mysql-vanilla
and save it to the same location.

h2. Running the mySQL example


h3. Deploying the Chef Server


To use a cookbook that with a Chef Server installation (not Chef Solo), you can use Cloudify to deploy a Chef Server.

To deploy the Chef Server:
# Connect to Cloudify Management machine -- At the Cloudify shell prompt, type: *@connect@*
# Deploy the Chef Server -- At the Cloudify shell prompt, type: *@install-application@* @<cloudifyRoot>/recipes/services/chef-server@

Once the Chef server is deployed, its location is published as an attribute in Cloudify's attributes store.

h4(info). Alternatively, you can configure Cloudify to use an existing Chef Server.

h3. Loading the mySQL Cookbook

The Cloudify Chef Server recipe adds a functionality to the Chef Server that allows users to upload Chef cookbooks as tarballs.
This is done by using the invoke command of Cloudify shell.
Type the following command at the Cloudify shell prompt: *@invoke@* @updateCookbooks@ _@tar 'http://repository.cloudifysource.org/chef-cookbooks/mysql_cookbook_with_deps.tgz'@_

h3. Installing the mysql_vanilla recipe

In the cloudify shell prompt type:
install-service followed by the path to the mysql_vanilla folder

That's all! Cloudify will start installing the mySQL server recipe.
You can trace the installation progress using the Cloudify shell or Cloudify Web UI.

h2. Running Additional Cookbooks

h3. Creating Recipes based on Chef Cookbooks

If you are not familiar with Cloudify recipes, please read "Anatomy of a Recipe":http://www.cloudifysource.org/guide/2.1/developing/recipes_overview first.

To create a Cloudify Chef recipe:
# Create a application recipe folder (e.g. use name of your application).
# Add the application level recipe file describing the service dependencies.
# Create a sub folder for each service.
# In the Chef service folder, create a service recipe (@<serviceName>-service.groovy@) that extends the @chef@ recipe, specifying the service name, icon, number of instances, ....
<script src="https://gist.github.com/3656102.js"> </script>
Optionally, you can specify the following sections in your recipe:
#* Monitoring -- Describes the custom performance indicators (metrics) to collate.
#* Scaling Rules --Describes the performance indicator and thresholds to use to scale your service.
#* Custom Commands -- Describes custom commands that add functionality. The commands can be invoked using the Cloudify shell at any time. They are usually used for different maintenance and application upgrade tasks.
# In the same folder, create a service properties file (@<serviceName>-service.properties@), specifying a property called @runParams@. For example, you can assign a groovy structure that gives an array of the Chef recipes to use, the name of the cookbook, and the default attributes.
<script src="https://gist.github.com/3656114.js"> </script>

h3. Loading Cookbooks

The Chef Server requires cookbooks to enable clients to install different services. Cookbooks can be loaded in the following ways:
* Using knife -- Use the command: *@knife@* @cookbook upload [COOKBOOKS...] (options)@. For more information, see "Managing Cookbooks With Knife":http://wiki.opscode.com/display/chef/Managing+Cookbooks+With+Knife.
* Adding a repository in the @chef-server@ recipe properties file, as follows:
<script src="https://gist.github.com/3656605.js"> </script>
# Pushing recipes using custom commands add to the service recipe file. For example, the @chef-server@ recipe exposes the following commands:
<script src="https://gist.github.com/3656626.js"> </script>

The updateCookbooks command can be used to upload cookbooks from different repositories such as GIT and SVN or just using a tarball. For example, I can upload the MySQL cookbook tarball by typing the following command at the Cloudify shell prompt: *@invoke@* @updateCookbooks@ _@tar 'http://repository.cloudifysource.org/chef-cookbooks/mysql_cookbook_with_deps.tgz'@_

h3. Running your Recipe

Chef based Cloudify recipes are run in the same way as other Cloudify recipes. You use must the Cloudify shell to connect to your Cloudify REST gateway, and then use the *@install-application@* command with the full path to your Chef recipe. You can monitor the installation progress in the Cloudify shell.





h2. How does Cloudify use Chef?

The following diagrams depict the Cloudify and Chef flow:
# Cloudify provisions machines and installs Cloudify agents as part of the deployment.
<img src="../../images/integrations/create_virtual_machines.png" width="655px">
# Cloudify executes a parameterized Cloudify Chef client recipe. This recipe installs and runs the Chef client, providing the required data bag and roles required for the Chef client to run.
<img src="../../images/integrations/install_chef_clients.png" width="655px">
# Chef executes the Chef cookbook and installs the required software.
<img src="../../images/integrations/chef_installs_software.png" width="655px">

h3. Chef Installation

Cloudify installs the chef client once the chef recipe triggers the install step of the service lifecycle, as follows.
<script src="https://gist.github.com/3656778.js"> </script>

The @ChefBootstrap.getBootstrap@ method is a factory method pattern that selects the correct bootstrap strategy depending to the current operating system. The @install@ method invoked on the factory, installs the Chef client using @gem@ or @yum@ install.

h3. Running Chef

The Chef service recipe uses the @run_chef.groovy@ script to run Chef with the correct run list.
This script gets the location of the Chef server from the Cloudify attributes store. Similarly, it gets the client certificate required for communication with the server. The run list is calculated using the Cloudify service name, or using the properties file of the service.

Chef then executes the cookbook in the normal way (completely independent of Cloudify).