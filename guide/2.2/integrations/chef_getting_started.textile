---
layout: default
title: Getting started
category: Chef Integration
publish: false
abstract: Getting started guide for using Chef in Cloudify
pageord: 100
---

h2. Introduction

This goal of this quide is to help you get started with integrating Chef "(newwindow)Recipes":http://wiki.opscode.com/display/chef/Recipes into your cloudify applications. If you are not already familiar with the basics of the Cloudify and the Chef Platforms, we recommend that you carefully read the Cloudify "(newwindow)Quick Start Guide":../qsg/quick_start_guide_helloworld and Chef "(newwindow)Fast Start Guide":http://wiki.opscode.com/display/chef/Fast+Start+Guide respectively.

This guide is based on Chef's client-server model (where clients pull all relevant data from the server and then push back their newly formed configuration) to provide a Chef service to an application called *fluffy* deployed on Cloudify.

h4(info) This is similar to the travel-chef example that is available in the "@cloudify-recipes@":https://github.com/CloudifySource/cloudify-recipes examples repository.

This guide teaches you how to:
# "Prepare your Application":#step1
# "Configure your Application to use a Chef Service":#step2
# "Deploy your Application with the Chef Service":#step3

h2(#step1). Step 1 -- Prepare your Application

# Under @apps/fluffy/@, create the application recipe (@fluffy.groovy@).
# Add the following services and configuration items in their respective folders to the application (under @apps/fluffy@):
#* @mysql@ -- A basic Cloudify service that extends the basic Chef service. You can copy the groovy file from the @cloudify-recipes@ examples repository.
#* @webapp@ -- A non-Chef Cloudify recipe (this is outside the scope of this tutorial).
#* @roles@ -- Contains a ruby file defining each of the chef roles to be used by the services in your application. In this example, we will use a single file "mysql.rb" with the following contents:
<script src="https://gist.github.com/3653737.js"> </script>
#* @cookbooks@ -- The chef cookbooks with the code that you need to flesh out with the roles you defined. In our example, we will use a fluffy cookbook with a mysql recipe that depends on the @mysql@ cookbook, and defines our additional databases/users. You can copy this from the @cloudify-recipes@ examples repository, and you can copy its dependencies from the same repository or the Ppscode cookbooks repository.

h2(#step2). Step 2 -- Configure your Application to use a Chef Service

h4(impt). Please note that the following instructions use *Cloudify* recipes and NOT *Chef* Recipes.

To add a Chef service to your application:
# Add the following *service* recipes to your application:
** "@chef@":https://github.com/CloudifySource/cloudify-recipes/blob/master/services/chef/chef-service.groovy -- The base service that will be extended by all the services to be bootstrapped using @chef@.
** "@chef-server@":https://github.com/CloudifySource/cloudify-recipes/blob/master/services/chef/chef-service.groovy -- Sets up a single-server instance configured with the @chef-server@ package. This service extends the @chef-server@ service and fetches the @chef@ data. Copy this from the @cloudify-recipes@ examples repository and change @fetch_chef_data.sh@ to point at the repository where you plan to keep the published version of this application.
<h4 class="info">You can also keep the @chef@ code in a completely separate repository (e.g. if the same @chef@ codebase is used for non-Cloudify deployments).</h4>
# Add the service to your *application* recipe (fluffy.groovy)
<script src="https://gist.github.com/3653290.js"> </script>
<h4 class="info">Note that the @mysql@ server is provisioned by Chef and that the @webapp@ server is provisioned by Cloudify.</h4>

h2(#step3). Step 3 -- Deploy your Application with the Chef Service

To install the application, using the Cloudify shell, bootstrap a cloud (e.g. *@bootstrap-cloud@* @ec2@), and then install the application (*@install-application@* @<cloudifyRoot>/apps/fluffy@".

h4(info). The installation proceeds according in the sequence specified in your application recipe, i.e. the first step provisions the @chef-server@ machine and pulls the Chef cookbooks and roles as defined in the @chef-server@ service file @fetch_chef_data.sh@ (this logic is incorporated as the @postStart@ event handler @chef_server_loadCookbooks.sh@ described in the lifecycle section of the service recipe, and is also available as a custom command to be rerun should the Chef cookbooks are updated). The next step provisions the mysql service, which in turn installs Chef and then runs the Chef client with the same role as the service's name (i.e. the role defined in @mysql.rb@).