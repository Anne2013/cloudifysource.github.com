---
layout: default
title: 10-Minute EC2 Quick Start Guide
cat: Getting Started
publish: true
abstract: A quick start guide to help you get started with Cloudify on EC2. Start here if you're new to Cloudify and you want to install your application on EC2
pageord: 200
---

h1. Introduction

The goal of this quick start guide is to familiarize you with Cloudify in a few simple steps. For this purpose, we will use the PetClinic application (an example application that is included in the Cloudify distribution file) to demonstrate the steps required to deploy an application on an Amazon EC2 cloud. For a quick start guide to using Cloudify on a local cloud, see "10-Minute Quick Start Guide":guide/qsg/quick_start_guide.

This guide teaches you how to:
* "Install the Cloudify Shell":#step1
* "Bootstrap on EC2":#step2
* "Understand the Recipe":#step3
* "Deploy the Recipe":#step4
* "Monitor the Application":#step5
* "Uninstall the Application":#step6
* "Teardown the Local Cloud":#step7

h2. About the Pet Clinic Application

The PetClinic application presented in this guide is a port of the "Spring PetClinic application":http://static.springsource.org/docs/petclinic.html to "Grails":http://grails.org/ and MongoDB, and uses the Grails GORM bindings to MongoDB. The users of the application are employees of the clinic who, in the course of their work, need to view and manage information regarding veterinarians, the clients, and their pets.

The application's environment is based on the following 2-tier architecture:

|_. Tier |_. Service |
| Web and Business Logic Tier | A Grails platform deployed on Apache Tomcat server |
| Database Tier | A "sharded MongoDB server cluster(Sharded MongoDB)":http://www.mongodb.org/display/DOCS/Sharding+Introduction compriised of the following components:
<ul><li>*"Configuration Server(MongoDB Configuration Server)":http://www.mongodb.org/display/DOCS/Configuring+Sharding#ConfiguringSharding-ConfigServers*: Stores the cluster's metadata including basic information on each shard server and the chunks contained therein.</li>
<li>*Routing Processes (mongos)*: A routing and coordination process that mediates between client requests and the actual mongod instances.  When receiving client requests, the mongos process routes the request to the appropriate mongod instance(s) and merges any results sent back to the client.</li>
<li>*Mongod instances (AKA shards)*: In our example, there are two instances of mongod used for storing the application's data.</li></ul> |

h4(info). The number of service instances can be easily configured by modifying the numInstances attribute in the relevant Cloudify recipe file (e.g. @<service-name>-service.groovy@).

h4(warn). When you install MongoDB on Windows 7, you must run MongoDB with administrative credentials. For more information, see the "Installing Windows 7" section of the "Windows Service":http://www.mongodb.org/display/DOCS/Windows+Service page.

h1(#step1). Step 1 - Install the Cloudify shell

This step describes how to install the Cloudify shell on your local machine.

h2. Prerequisites

Before you install the Cloudify shell, make sure that your environment meets all the minimum requirements. For more information, see "Cloudify Prerequisites":/guide/setup/cloudify_prerequisites.

h2. To install the Cloudify shell

# Install @Java@ on your machine.
# "Download(Click here to download the Cloudify zip file)":http://bit.ly/ztbg9u and unzip the Cloudify distribution file.
# Go to the @<Cloudify Installation Folder>/bin@ folder, and then run @cloudify.bat@ (Windows) or @cloudify.sh@ (Linux) depending on the operating system running on your machine.
  <img src="/guide/images/setup/shell_start2.jpg" width="630" height="300" />

h1(#step2). Step 2 - Bootstrap on EC2

This step describes how to bootstrap Cloudify on EC2.

h2. Prerequisites

Before you use the Cloudify shell to bootstrap on EC2, make sure that you perform the following tasks:

# Create an Amazon Web Services account.
# Create an EC2 private key file (.pem) and save it under @<Cloudify Root>/tools/cli/plugins/esc/ec2/upload@. You can create and download an EC2 private key file, as follows:
## Browse to your EC2 management console, expand *Network & Security*, click *Key Pairs*, and then click *Create Key Pair*.
<img src="/guide/images/ec2/EC2_CREATE_KEY_PAIRS_RAW3.jpg" />
## Specify the *Key Pair Name*, and then click *Create*.
<h4 class="info">Make a note of the name as this information will be required for configuring the Cloudify cloud driver. For this example, we will use *myKeyPair-name* that creates the corresponding *myKeyPair-name.pem* key pair file.</h4>
<img src="/guide/images/ec2/EC2_CREATE_KEY_PAIRS_1_RAW3.jpg" />
## When the download dialog box opens, click *OK* to save the EC2 keypair file.
<h4 class="info">Make sure the file is saved under @<Cloudify Root>/tools/cli/plugins/esc/ec2/upload@.</h4>
<img src="/guide/images/ec2/EC2_CREATE_KEY_PAIR_SUCCESS_AND_SAVE3.jpg" />
<h4 class="info">The private key enables Cloudify cloud driver to create SSH connections to newly created instances on EC2.</h4>
# Configure the Cloudify EC2 cloud driver @<Cloudify Root>/tools/cli/plugins/esc/ec2/@. To configure the EC2 cloud driver, edit the file and modify the following attribute values:
#* In the @user@ section:
#** @user@--Type your EC2 *Access Key ID*.
To obtain your active *Access Key ID*, browse to your AWS management console, click *Security Credentials*, and then click the *"(newwindow)Access Keys(Link to the AWS management console's Access Credentials tab)":https://aws-portal.amazon.com/gp/aws/developer/account/index.html?action=access-key, click *Access Credentials** tab.
<img src="/guide/images/ec2/EC2_ACCESS_KEY_AND_SECRET_KEY3.jpg" />
#** @apiKey@--Type your EC2 *Secret Access Key*.
To obtain your *Secret Access Key*, browse to your AWS management console, click *Security Credentials*, click the *"(newwindow)Access Keys(Link to the AWS management console's Access Credentials tab)":https://aws-portal.amazon.com/gp/aws/developer/account/index.html?action=access-key, click *Access Credentials** tab, and then click *Show*.
<h4 class="info">The Secret Access Key must correspond to the specified Access Key ID.</h4>
#** @keyFile@--Type the name of the previously created key pair file (in our example, *myKeyPair-name.pem*).
#* In the @templates@ section, under @options@:
#** @keyPair@--Type the *Key Pair Name* used when creating the key pair file. (in our example, *myKeyPair-name*).

h4(info). For a more information about how to configure the EC2 cloud driver, see "Bootstrapping Cloudify on EC2":/guide/bootstrapping/bootstrapping_ec2.

h2. To bootstrap Cloudify on EC2

To bootstrap on EC2, at the Cloudify shell prompt, type: *bootstrap-cloud* @ec2@

The installation progress is displayed for the following Cloudify components as the local cloud is bootstrapping:
* *The Cloudify agent*--The component that runs on all Cloudify managed VMs that is responsible starting application services, gathering monitoring metrics, and monitoring their availability.
* *The management service*--The "brains" of Cloudify that is responsible for provisioning VMs, triggering the deployment process, and aggregating the metrics collected by each Cloudify agent.
* *The REST gateway service*--The service that exposes a RESTful interface to the services provided by the management service.
* *The Web management console service*--The service that provides a Web-based GUI to the Cloudify environment and allows you to easily monitor your applications.

h4(info). To obtain a list of all the available commands, type @<tab>@, or to view help for a specific command, type @[cmd] --help@. Note that the Cloudify shell automatically connects to the REST service such that you do not have to run the *connect* command separately. For more information about Cloudify commands, see "Command Line Reference":/guide/setup/command_line_reference.

<img src="/guide/images/setup/bootstrapp_ec2_1.jpg" width="714" height="495" />

Your EC2 cloud is now ready for deploying the PetClinic application.
For more information about Bootstrapping on EC2, see "Bootstrapping Cloudify on EC2":/guide/bootstrapping/bootstrapping_ec2.

h1. Step 3 - Learn about the Application Recipe

First, let's take a brief look at the PetClinic application recipe you're about to deploy.
In the @<Cloudify Root>/examples/petclinic@ folder you will find the following files and folders:
# The application recipe: @petclinic-mongo-application.groovy@
# The Configuration Server (mongoConfig) recipe folder
# The Shards (mongod) recipe folder
# The Routing Processes (mongos) recipe folder
# The Tomcat recipe folder

In each of the above folders you will find all the files required to run the corresponding service. A "service" in this context is an application tier - e.g. web container, database, etc.

The following diagram depicts the application recipe file and folder structure: 


<img src="/guide/images/setup/pet_clinic_anatomy3.JPG" />


h2. The Application Recipe

Every application has its own mandatory application level descriptor.
The application level recipe describes the application services and their inter-dependencies.
As a rule of thumb, each unique set of processes which are functioning as one tier, should be regarded as a service, e.g. a tomcat cluster, or a MySql primary and backup servers. 

<h4 class="warn">Please note the difference between a service and a service instance. A service can be defined as a cluster which is composed of at least one service instance.</h4>

Every service instance resides on one host (typically this would be a VM), whereas a service is the aggregation of all service instances, and as such can span multiple machines, depending on its number of instance. A typical application is composed of multiple tiers, such as a web server tier and a database tier.
Each tier can contain one or more instances, for example: two Tomcat instances and one MySQL instance.
In the Cloudify lingo that translates into two services, the first having two service instances and the second having one service instance.

The Pet Clinic application has 4 services:
# Tomcat  (We named this service: tomcat)
# MongoDB Configuration Server (We named this service: mongoConfig)
# MongoDB Sharding Server (We named this service: mongos)
# MongoDB Data Shards (We named this service: mongod)

Here's what our Pet Clinic application recipe looks like:

<script src="https://gist.github.com/1943898.js?file=petclinic_app_recipe.groovy"></script>

From the above code, one can learn:
* The names of all the involved services.
* That the mongos service depends on two services: mongoConfig and mongod.
* That the tomcat service depends on mongos service.

In general, a dependent service will start running only after the services it depends on have successfully started.

h3. The Service Level Recipe

Every service has its own mandatory service level recipe.
However, the "recipe structure":/guide/developing/recipes_overview is common to all of them.

Each service folder contains all the information required by the service:

* A service file (@<service name>-service.groovy@)  which can contain some or all of the following sections:
*# *A prolog section* which contains the service name, type, number of required instances and the icon to display for this service in the Cloudify Web Management Console./guide/
*# *A lifecycle section* which is the most important part of the recipe. 
This section tells Cloudify how to handle the Service lifecycle events such as installation, startup, shut down and uninstall.
Each event will be handled by a handler which can be an external Groovy script, a shell script or a batch file (depending on the operating system). Whichever handler you prefer, it must reside in the service folder.
Cloudify can execute the same recipe on different operating systems, provided that you specify the instructions for each type of OS family within the recipe or that they are generic enough to run on all OS types and flavors.
*# *A compute section* where you can insert a template name.
    A template name is a logical name of a hardware profile for each instance of the service. A hardware profile is defined in the cloud driver, and maps to a specific hardware setup and image size (e.g. in Amazon EC2, it would map to the combination of hardware id (m1.small , c1.medium etc.) and an ami id). This allows for clear separation between the application recipe and the cloud environment on which it runs. To learn more about hardware profiles refer to the "Cloud Drivers":/guide/clouddrivers/cloud_driver section.
*# *A customCommands section* in which you can add commands that you will later be able to invoke when needed using the interactive shell.
*# *A plugins section* which tells Cloudify how to:
*#* Verify if the service has started correctly, by probing the started service for its runtime details at startup time, or by requesting a (specific) response from a certain URL, or by checking a certain port, etc.
*#* Get service-specific monitoring metrics (e.g.: Tomcat active sessions if you're running a Tomcat service, or the number of active connections if you're running mysql). This can be done via various probing strategies, such as JMX, JDBC, CLI or even a custom implementation created by the recipe developer. The metrics are probed from the service repeatedly every 5 seconds.
*# *A UI configuration section* (called @userInterface@) which defines to the Cloudify Web Management Console how to visualize the monitored metrics.
* An optional file that contains an image to be used for displaying this service in the Cloudify Web Management Console.
* An optional service properties file (&lt;service name&gt;.properties) which (if exists) contains configurable parameters to be used by this service.
* All the specified life cycle script files, e.g. &lt;service name&gt;_install.groovy, &lt;service name&gt;_start.groovy etc.
For example: The @<service name>_install.groovy@ script will typically run during the installation of the service, if it's specified in the lifecycle section of the service file. The above naming of the life cycle scripts is optional. You can name them as you wish, as long as you specify their exact names in the corresponding service file.
The usage of any handler file is optional. For example: If you don't specify a post-installation script in the service recipe, then no handler will be activated after the service has been installed.
* An optional folder called @usmlib@ which should contain all your plugins jar files (required only if you developed your own plugins).
Cloudify comes with "built-in plugin implementations":/guide/plugins_and_probes/develop_your_plugin that you can configure as needed, but you can also develop your own monitoring plugins and pack them with the recipe (in jar files under usmlib sub-folder within each service folder).
In the Pet Clinic application we used our Cloudify Mongo Plugin "cloudify-mongo-plugin.jar":http://www.gigaspaces.com/wiki/download/attachments/55935974/CloudifyMongoPlugins_sources2_0.zip to get details and to detect port liveness.


h3. The Life Cycle Scripts

Open one of the Groovy scripts (with a text editor) in the tomcat recipe folder and you will see that these are plain groovy scripts, in which you can use any Groovy or Java code you wish.
The only unique Cloudify API that is being used is the "ServiceContext API":../developing/the_service_context_api. This API exposes the service runtime details so that one service can locate and use the details of another service within the same application.
By using this API, we expose the port (for example) of the mongod service instance to the all the other services in the Pet Clinic Application.

h3. Getting the service binaries

The service binaries, namely the Tomcat and MongoDB distributions, can be quite large to upload upon installation.
Therefore the recipe downloads them upon installation from a file repository (this can be any http, ftp or file system location) so they're not uploaded with the recipe.
The binaries are fetched using Groovy's built in support for "Apache Ant":http://ant.apache.org called "AntBuilder":http://groovy.codehaus.org/api/groovy/util/AntBuilder.html and the Ant @get@ task.

h3. The Mongo Config Server (mongoConfig) Service Recipe

The Mongo Config Server (mongoConfig) Server recipe does the following:
* Calculates its port according to its instance ID and properties file and notifies the serviceContext, so that the other services will be able to access it.
* Downloads, unzips and installs the mongo binaries on the VM.
* Starts the Configuration Server process.
* Detects a successful startup using the MongoLivenessDetector plugin.
* Looks for metrics (Active Read Clients, Active Write Client etc.) to be displayed in the Web UI.

The mongo-config service file is located at &lt;cloudify root&gt;/examples/petclinic/mongoConfig/mongoConfig-service.groovy. 

h3. The Mongo Sharding Server (mongos) Recipe 

The Mongo Router (mongos) recipe does the following:
* Calculates its port according to its instance ID and properties file and notifies the serviceContext, so that the other services will be able to access it.
* Downloads, unzips and installs the mongo binaries on the VM.
* Starts the Router Server process.
* Detects a successful startup using the MongoLivenessDetector plugin.
* Looks for host address and port of the mongoConfig service (using the serviceContext API) and the the Mongo data shards (mongod), and configures sharding.
* Looks for metrics (Active Read Clients, Active Write Client etc.) to be displayed in the Web UI.

The mongos service file is located at &lt;cloudify root&gt;/examples/petclinic/mongos/mongos-service.groovy.

h3. The Mongo Data Shards (mongod) Recipe

The Mongo Data Shards (mongod) Recipe does the following:
* Calculates its port according to its instance ID and properties file and notifies the serviceContext, so that the other services will be able to access it.
* Downloads, unzips and installs the mongo binaries on the VM
* Starts the Shard Server process.
* Detects a successful startup using the MongoLivenessDetector plugin
* Looks for metrics (Active Read Clients, Active Write Client etc.) to be displayed in the Web UI.

The mongod service file is located at &lt;cloudify root&gt;/examples/petclinic/mongod/mongod-service.groovy.

h3. The Tomcat Recipe

The Tomcat Recipe does the following:
* Downloads, unzips and installs the tomcat binaries on the VM
* Configures the tomcat Http Port and the enables remote JMX
* Starts the tomcat process (using the bin/catalina script)
* Detects a successful startup using the PortLivnessDetector on port 8080
* Monitors Tomcat performance using the JMX Monitoring Plugin

Here are the relevant code snippets that show how we expose the mongos service instance (host and port) to the tomcat service instance.
For that purpose, we use our powerful ServiceContext API and its k/v store mechanism.

<script src="https://gist.github.com/1698917.js?file=exposeMongosService.groovy"></script>
  
And then we retrieve the data in &lt;cloudify root&gt;/examples/petclinic/tomcat/tomcat_start.groovy

<script src="https://gist.github.com/1698923.js?file=retrieveMongosServie.groovy"></script>

From this point, the tomcat service instance knows the host address and port of the mongos service instance.

The tomcat service file is located at &lt;cloudify root&gt;/examples/petclinic/tomcat/tomcat-service.groovy.


h1. Step 4 - Deploying the Recipe

Now that you are more familiar with the recipe mechanism, let's deploy the application. Please type the following (replace &lt;Cloudify root&gt; with the Cloudify's installation location on your machine:
 @install-application -timeout 50 <Cloudify root>/examples/petclinic@
 

You may add the @--verbose@ option for more verbosity during the installation process. We've added the @-timeout@ option since the recipe itself downloads the service binaries (in our case the Tomcat and mongoDB distribution) from the web when installing for the first time, so the first installation may take longer.
To be on the safe side, specify a timeout of at least 50 minutes as described above, which means that the shell will wait for 50 *minutes* for the application to install.

 <h4 class="warn"> Note: Currently the Cloudify shell does not support backslashes so your path separator has to be forward slash even if you're running on Windows.</h4>

You will see a progress report within the shell (see the screenshot below) until the entire application has been successfully installed. If an error occurred the shell will report and abort installation, so you will know at which phase and for which service it has occurred without leaving the shell application.

Once the application installation is finished successfully you can open your web browser with the following link: "http://YOUR_APPLICATION_IP_ON_EC2:8080/petclinic-mongo":http://YOUR_APPLICATION_IP_ON_EC2:8080/petclinic-mongo

You can add a few owners and pets and then search for them to make sure that the application is functioning properly. 

h1. Step 5 - Monitoring the application

To monitor the application open a web browser (the latest versions Firefox or Chrome, IE is not fully supported at this point) and log into the "Web Management Console":/guide/monitoring/the_web_management_console (The shell gives you the exact URL when bootstrapping the localcloud). Usually it would be "http://WEB_UI_SERVICE_IP:8099":http://WEB_UI_SERVICE_IP:8099. You don't need to specify any username or password, just click the login button to login anonymously. 

Click the the *Topology* link at the upper pane, and switch to the Topology tab. Use the application selection combo box at the top right to navigate to the pet clinic application. You should see the application map as described in the pet clinic application recipe. Each service has a real-time status and shows the number of actual service instances. Click one of the services in the application map.

At the lower pane you can move between several views:
* Metrics view: displays the service metrics configured in the recipe GUI section
* Infrastructure view: Lists the virtual hosts on which your application services are deployed.
* Services view: allows you to look at individual service instances and correlate their various metrics.

<img src="/guide/images/setup/petClinic_in_webui_screenShot2.jpg" width="630" height="300"/>

h1. Step 6 - Uninstalling the Application

To uninstall the application please type the following: *uninstall-application petclinic*


You will be prompted if you want to uninstall, type 'y' and click enter. 

h1. Step 7 - Tearing Down the Cloudify Controller on the Cloud

To turn off all Cloudify services type the following command: *teardown-cloud ec2*

h1. What's Next?

* Learn more about "recipe development":/guide/developing/recipes_overview.
* Learn more about cloud portability and "cloud drivers":/guide/clouddrivers/cloud_driver.
* Learn how to "develop a monitoring plugin":/guide/plugins_and_probes/develop_your_plugin.
* Learn how to further monitor your application with the "Web Based UI":/guide/monitoring/the_web_management_console.