---
layout: default
title: Service Attributes API
category: devrecipe
---
p. Service Attributes facade

h1. Service Attributes explained

Services across an application may sometime need to expose some attributes to the other services, for example some monitoring port which is determined at runtime at each service instance and so on. This attributes can be stored in an application context, a service context or a service instance context, and they can be read and updated by all the services instances that exists in the application. The way to do so is using the service context that exists once a service instance is running. For example:
<script src="https://gist.github.com/1704821.js?file=gistfile1.groovy"></script>

This example shows that after the service instance is started, it will keep under that instance context “myValue” under “myKey” that everyone else can access. Additionally it will print another service named otherService attribute value of key “otherKey”.
The entire API looks like this:
context.attributes.thisInstance.myKey = “myValue” – store myValue for myKey under this instance attributes context.
This is equivalent to:
context.attributes.thisInstance[“myKey”]  = “myValue”
context.attributes.thisService.myKey = “myValue” – store myValue for myKey under this service attributes context. In this case there is only one myKey value under a service context, so any updates done by the instances to the service context will overwrite each other.
context.attributes.thisApplication.myKey = “myValue” – store myValue for myKey under this entire application attributes context. In this case there is only one myKey value in the entire application context, so any updates done by the instances to the application context will overwrite each other.
A service instance can read write or modify the attributes of another service instance and also of another service, and another service instances. This is done by specifying the service name instead of thisService. For example
context.attributes.tomcat.myKey = “myValue” – store myValue for myKey under tomcat service context.
context.attributes.tomcat.instances[1].myKey = “myValue” – store myValue for myKey under tomcat service instance id 1 context (instance ids are 1-based).
You cannot access attributes of other applications, only attributes that belong to this application, its services and their instances.
You can also iterate over instances in the following way:
context.attributes.thisService.instances.foreach{println t.myKey}.

The context of the attributes is always visible from the other services and can be altered by them completely, the isolation is not for security purposes but for application context purposes which provides easy way to read and update attributes between the different services. However, as stated, one application cannot read or modify another application attributes.

