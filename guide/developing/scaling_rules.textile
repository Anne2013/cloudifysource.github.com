---
layout: default
title: Using Scaling Rules
category: Developing Recipes
publish: true
abstract: Describes the Scaling Rules mechanism and usage
pageord: 1200
---

h2. Scaling services

Cloudify supports two methods for scaling a service:
# "Automatic Scaling":#sr1
# "Manual Scaling":#ms1


h2(#sr1). Automatic Scaling (Scaling Rules)

Cloudify enables each service to define one scaling rule for deciding if the service needs to scale out or scale in. For example, Cloudify can decide based on the average number of busy threads, to increase the number of tomcat service instances or to decrease it.

h4(info). In the current version, you can only describe one scaling rule per service.


h3. The Scaling Rule Flow

<img src="/guide/images/recipes/scale_rule_flow.jpg"/>

h3. The Scaling Rule's Elements

Scaling rules have upper and lower thresholds, they are based on metrics defined by a recipe and are collected by the various java or groovy plugins from the application service. Each rule relates to a cluster that contains one or more service instances.

* The following *metrics* are available:
** Any custom KPI (Key Performance Indicator)-  For example : JMX attributes
** Sampling rates - For example : the number of requests per second.
* The following *statistics* are available: 
** Avg/min/max/percentile
** Time range
* *Thresholds*:
** When a metric value is above the upper threshold, Cloudify increases the number of provisioned service instances.
** When a metric value is below the lower threshold, Cloudify decreases the number of provisioned service instances.


h3. Scaling rules syntax

<script src="https://gist.github.com/2566833.js?file=tomcat_auto_scaling.groovy"></script>

<br/>

h2(#ms1). Manual Scaling 

Cloudify also enables you to set the number of service instances manually.
If you want to set the number of service instances manually, type the following command in the Cloudify Shell: *set-instances service-name number-of-required-instances*. 

h4(info). In order to enable manual scaling, you must set the *elastic* attribute to true in the service file.


In the following example, Cloudify adjusts the number of tomcat service instances to three.
If the tomcat service has *two* instances prior to invoking the following command, it *increases* the number of tomcat service instances to three and if the tomcat service has *five* instances prior to invoking the following command, it *decreases* the number of tomcat service instances to three.

*set-instances tomcat 3*

h4(warn). 1. The number number-of-required-instances must be greater than or equal to the value of the *minAllowedInstances* attribute if this attribute is set in the service file.

h4(warn). 2. The number number-of-required-instances must be less than or equal to the value of the *maxAllowedInstances* attribute if this attribute is set in the service file.

Here's a snippet of a tomcat service file : 
<script src="https://gist.github.com/2567663.js?file=tomcat_manual_scaling.groovy"></script>

